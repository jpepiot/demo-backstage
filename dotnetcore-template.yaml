apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  name: dotnetcore-api
  title: DotNetCore Web API
  description: Template for the scaffolder that creates a DotNet Core Web API
  tags:
    - recommended
    - dotnetcore
spec:
  owner: user:guest
  type: service
  parameters:
    - title: Fill in some steps
      required:
        - name
        - projectType
        - owner
      properties:
        name:
          title: Name Application
          type: string
          description: Unique name of the component
          ui:autofocus: true
          ui:options:
            rows: 5
        projectType:
          title: Type imperative - reactive
          type: string
          description: With this parameter the task will generate a POO project
          ui:autofocus: true
          ui:options:
            rows: 5
        owner:
          title: Owner
          type: string
          description: Owner of the component
          ui:field: OwnerPicker
          ui:options:
            allowedKinds:
              - Group
    - title: Choose a location
      required:
        - repoUrl
      properties:
        repoUrl:
          title: Repository Location
          type: string
          ui:field: RepoUrlPicker
          ui:options:
            allowedHosts:
              - gitlab.com

  # These steps are executed in the scaffolder backend, using data that we gathered
  # via the parameters above.
  steps:
    # Each step executes an action, in this case one templates files into the working directory.
    - id: fetch-base
      name: Fetch Base
      action: fetch:template
      input:
        url: ./
        values:
          name: ${{ parameters.name }}
          package: ${{ parameters.package }}
          projectType: ${{ parameters.projectType }}
          owner: ${{ parameters.owner }}

    # This step publishes the contents of the working directory to GitHub.
    - id: publish
      name: Publish
      action: publish:github
      input:
        allowedHosts: ['github.com','dev.azure.com']
        description: This is ${{ parameters.name }}
        repoUrl: ${{ parameters.repoUrl }}

    # The final step is to register our new component in the catalog.
    - id: register
      name: Register
      action: catalog:register
      input:
        repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
        catalogInfoPath: '/catalog-info.yaml'

  # Outputs are displayed to the user after a successful execution of the template.
  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
      - title: Open in catalog
        icon: catalog
        entityRef: ${{ steps.register.output.entityRef }}
